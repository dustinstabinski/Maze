{"version":3,"sources":["components/square.jsx","components/maze.jsx","components/timer.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["Sqaure","formatSquare","font","props","id","squareOn","isStart","isEnd","isComplete","isWall","keyDown","event","key","onMove","Fragment","this","onClick","onKeyDown","className","class","Component","Maze","state","squares","starting_id","square_id_on","lastkey","followPath","direction","square_id","gameComplete","SIZE","renderSquare","setState","renderStart","fillMaze","size","maze","counter","i","row","j","push","traveled","s","parseInt","col","new_state","document","getElementById","focus","checkVisitedSides","id_on","out","checkUnvisitedSides","ResetMaze","pathMaker","start_id","end_id","unused","walls","concat","end_row","end_col","wall_index","Math","round","random","length","wall_on","neighbors","neighbor_on","passage_id","splice","increaseDifficulty","used","Set","count","has","add","wall_neighbors","verifySolution","show_solution","stack","visited","node","pop","showSolution","renderRestart","activeElement","map","square","type","Timer","startTimer","clock","timer","setInterval","time","time_left","stopTimer","clearInterval","beginGame","inMotion","formatTimer","playerWon","formatText","Game","sleep","milliseconds","Promise","resolve","setTimeout","startMaze","click","innerHTML","disabled","then","renderFinish","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3317c7b6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Sqaure extends Component {\n\n\n  formatSquare = () => {\n    let font = \"btn btn-\";\n    if (this.props.id === this.props.squareOn){\n      font += \"warning\";\n    }\n    else if (this.props.isStart || this.props.isEnd || this.props.isComplete) {\n      font += \"success\";\n    }\n    else if (this.props.isWall) {\n      font += \"danger\";\n    }\n    else {\n      font += \"primary\"\n    }\n    return font;\n  };\n\n  keyDown = (event) => {\n    if (event.key === \"ArrowRight\") {\n      this.props.onMove(\"ArrowRight\");\n    }\n    else if (event.key === \"ArrowLeft\") {\n      this.props.onMove(\"ArrowLeft\");\n    }\n    else if (event.key === \"ArrowUp\") {\n      this.props.onMove(\"ArrowUp\");\n    }\n    else if (event.key === \"ArrowDown\") {\n      this.props.onMove(\"ArrowDown\");\n    }\n  }\n\n  \n\n\n  render() {\n    return (\n      <React.Fragment>\n        <button id={this.props.id} onClick={this.props.onClick} onKeyDown={this.keyDown} className=\"sqaure\" class={this.formatSquare()}>\n          {\" \"}\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Sqaure;\n","import React, { Component } from \"react\";\nimport Square from \"./square\";\n\nconst SIZE = 25;\nconst START = 0;\nconst END = SIZE * SIZE - 1;\n\nclass Maze extends Component {\n  state = {\n    squares: [],\n    starting_id: -1,\n    square_id_on: -1,\n    lastkey: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.state.squares = this.fillMaze(SIZE);\n  }\n\n  /*Takes in an arrow key action and creates a path */\n  followPath = (direction) => {\n    const square_id = this.state.square_id_on;\n    if (this.props.gameComplete) {\n      return;\n    }\n    if (direction === \"ArrowRight\") {\n      if (square_id % SIZE === SIZE - 1) {\n        return;\n      }\n      if (this.state.lastkey === \"ArrowLeft\") {\n        this.renderSquare(square_id);\n      } else {\n        this.renderSquare(square_id + 1);\n      }\n    } else if (direction === \"ArrowLeft\") {\n      if (square_id % SIZE === 0) {\n        return;\n      }\n      if (this.state.lastkey === \"ArrowRight\") {\n        this.renderSquare(square_id);\n      } else {\n        this.renderSquare(square_id - 1);\n      }\n    } else if (direction === \"ArrowDown\") {\n      if (this.state.lastkey === \"ArrowUp\") {\n        this.renderSquare(square_id);\n      } else {\n        this.renderSquare(square_id + SIZE);\n      }\n    } else if (direction === \"ArrowUp\") {\n      if (this.state.lastkey === \"ArrowDown\") {\n        this.renderSquare(square_id);\n      } else {\n        this.renderSquare(square_id - SIZE);\n      }\n    }\n    this.setState({ lastkey: direction });\n  };\n\n  /* Saves starting position */\n  renderStart = () => {\n    if (this.state.starting_id === -1) {\n      const square_id = START;\n      this.setState({ starting_id: square_id });\n      this.renderSquare(square_id);\n    }\n  };\n\n  /* initialize maze */\n  fillMaze = (size) => {\n    var maze = [];\n    var counter = 0;\n    for (var i = 0; i < size; i++) {\n      var row = [];\n      for (var j = 0; j < size; j++) {\n        row.push({\n          id: counter,\n          traveled: false,\n          isWall: true,\n          isComplete: false,\n        });\n        counter++;\n      }\n      maze.push(row);\n    }\n    return maze;\n  };\n\n  renderSquare = (s) => {\n    if (s > SIZE * SIZE - 1 || s < 0) {\n      return;\n    }\n    const row = parseInt(s / SIZE);\n    const col = parseInt(s % SIZE);\n    const new_state = this.state.squares;\n    if (new_state[row][col].isWall) {\n      return;\n    }\n    if (s !== this.state.starting_id) {\n      new_state[row][col].traveled = !new_state[row][col].traveled;\n    }\n    this.setState(new_state);\n    document.getElementById(s).focus();\n    this.props.isComplete(s);\n    this.setState({ square_id_on: s });\n  };\n\n  /* pathMaker helper function, look for valid UNVISITED sides*/\n\n  checkVisitedSides = (maze, id_on) => {\n    var row = parseInt(id_on / SIZE);\n    var col = id_on % SIZE;\n    var out = [];\n    if (id_on < SIZE * SIZE && id_on >= 0) {\n      if (col + 2 < SIZE && !maze[row][col + 2].isWall) {\n        out.push(maze[row][col + 2]);\n      }\n      if (col - 2 >= 0 && !maze[row][col - 2].isWall) {\n        out.push(maze[row][col - 2]);\n      }\n      if (row + 2 < SIZE && !maze[row + 2][col].isWall) {\n        out.push(maze[row + 2][col]);\n      }\n      if (row - 2 >= 0 && !maze[row - 2][col].isWall) {\n        out.push(maze[row - 2][col]);\n      }\n    }\n    return out;\n  };\n\n  checkUnvisitedSides = (maze, id_on) => {\n    var row = parseInt(id_on / SIZE);\n    var col = id_on % SIZE;\n    var out = [];\n    if (id_on < SIZE * SIZE && id_on >= 0) {\n      if (col + 2 < SIZE && maze[row][col + 2].isWall) {\n        out.push(maze[row][col + 2]);\n      }\n      if (col - 2 >= 0 && maze[row][col - 2].isWall) {\n        out.push(maze[row][col - 2]);\n      }\n      if (row + 2 < SIZE && maze[row + 2][col].isWall) {\n        out.push(maze[row + 2][col]);\n      }\n      if (row - 2 >= 0 && maze[row - 2][col].isWall) {\n        out.push(maze[row - 2][col]);\n      }\n    }\n    return out;\n  };\n\n  ResetMaze = () => {\n    this.setState(() => {\n      return {\n        squares: this.fillMaze(SIZE),\n        starting_id: -1,\n        square_id_on: -1,\n        lastkey: \"\",\n      };\n    });\n  };\n\n  /* Creates a maze */\n  pathMaker = (start_id, end_id) => {\n    const maze = this.state.squares;\n    var row = parseInt(start_id / SIZE);\n    var col = start_id % SIZE;\n    var unused = [];\n    maze[row][col].isWall = false;\n    var walls = this.checkUnvisitedSides(maze, start_id);\n    unused = unused.concat(walls);\n    var end_row = parseInt(end_id / SIZE);\n    var end_col = end_id % SIZE;\n    while (maze[end_row][end_col].isWall) {\n      const wall_index = Math.round(Math.random() * (unused.length - 1));\n      const wall_on = unused[wall_index];\n      const neighbors = this.checkVisitedSides(maze, wall_on.id);\n      const neighbor_index = Math.round(Math.random() * (neighbors.length - 1));\n      const neighbor_on = neighbors[neighbor_index];\n      const passage_id = (wall_on.id + neighbor_on.id) / 2;\n      row = parseInt(passage_id / SIZE);\n      col = passage_id % SIZE;\n      maze[row][col].isWall = false;\n      row = parseInt(wall_on.id / SIZE);\n      col = wall_on.id % SIZE;\n      maze[row][col].isWall = false;\n      unused = unused.concat(this.checkUnvisitedSides(maze, wall_on.id));\n      unused.splice(wall_index, 1);\n    }\n    this.increaseDifficulty(maze, start_id, end_id);\n    this.setState({ squares: maze });\n    this.renderStart();\n  };\n\n  increaseDifficulty = (maze, start_id, end_id) => {\n    const used = new Set();\n    for (var count = 0; count < SIZE * SIZE; count++) {\n      const i = Math.round(Math.random() * (SIZE - 1));\n      const j = Math.round(Math.random() * (SIZE - 1));\n      if (\n        maze[i][j].id === start_id ||\n        maze[i][j].id === end_id ||\n        used.has(maze[i][j].id)\n      ) {\n        continue;\n      }\n      used.add(maze[i][j].id);\n      if (!maze[i][j].isWall) {\n        maze[i][j].isWall = true;\n        if (!this.verifySolution(maze, start_id, end_id, false)) {\n          maze[i][j].isWall = false;\n          count--;\n        }\n      } else {\n        var wall_neighbors = 0;\n        if (i - 1 >= 0) {\n          wall_neighbors += maze[i - 1][j].isWall;\n        }\n        if (i + 1 < SIZE) {\n          wall_neighbors += maze[i + 1][j].isWall;\n        }\n        if (j - 1 >= 0) {\n          wall_neighbors += maze[i][j - 1].isWall;\n        }\n        if (j + 1 < SIZE) {\n          wall_neighbors += maze[i][j + 1].isWall;\n        }\n        if (wall_neighbors === 3) {\n          maze[i][j].isWall = false;\n          if (!this.verifySolution(maze, start_id, end_id, false)) {\n            maze[i][j].isWall = true;\n            count--;\n          }\n        }\n      }\n    }\n  };\n\n  verifySolution = (maze, start_id, end_id, show_solution) => {\n    var row = parseInt(start_id / SIZE);\n    var col = start_id % SIZE;\n    const stack = [];\n    stack.push(maze[row][col].id);\n    const visited = new Set();\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      row = parseInt(node / SIZE);\n      col = node % SIZE;\n      visited.add(maze[row][col].id);\n      if (\n        col + 1 < SIZE &&\n        !maze[row][col + 1].isWall &&\n        !visited.has(maze[row][col + 1].id)\n      ) {\n        stack.push(maze[row][col + 1].id);\n      }\n      if (\n        col - 1 >= 0 &&\n        !maze[row][col - 1].isWall &&\n        !visited.has(maze[row][col - 1].id)\n      ) {\n        stack.push(maze[row][col - 1].id);\n      }\n      if (\n        row + 1 < SIZE &&\n        !maze[row + 1][col].isWall &&\n        !visited.has(maze[row + 1][col].id)\n      ) {\n        stack.push(maze[row + 1][col].id);\n      }\n      if (\n        row - 1 >= 0 &&\n        !maze[row - 1][col].isWall &&\n        !visited.has(maze[row - 1][col].id)\n      ) {\n        stack.push(maze[row - 1][col].id);\n      }\n    }\n    var count = 0;\n    for (var i = 0; i < SIZE; i++) {\n      for (var j = 0; j < SIZE; j++) {\n        if (!maze[i][j].isWall) {\n          count++;\n        }\n      }\n    }\n    if (show_solution) {\n      return visited.has(end_id);\n    } else {\n      return visited.has(end_id) && count === visited.size;\n    }\n  };\n\n  showSolution = (start_id, end_id) => {\n    const maze = this.state.squares;\n    for (var i = 0; i < SIZE; i++) {\n      for (var j = 0; j < SIZE; j++) {\n        if (maze[i][j].id === start_id) {\n          continue;\n        }\n        maze[i][j].isWall = true;\n        if (!this.verifySolution(maze, start_id, end_id, true)) {\n          maze[i][j].isWall = false;\n        }\n      }\n    }\n    this.setState({ squares: maze });\n  };\n\n  renderRestart = () => {\n    if (parseInt(document.activeElement.id) === START) {\n      this.setState({ square_id_on: START });\n      document.getElementById(START).focus();\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"maze\" class=\"p-3 mb-2 bg-dark text-white main\">\n        {this.state.squares.map((row) => {\n          return row.map((square) => (\n            <Square\n              key={square.id}\n              id={square.id}\n              isStart={square.id === START}\n              isEnd={square.id === END}\n              isComplete={this.state.square_id_on === END}\n              isWall={square.isWall}\n              traveled={square.traveled}\n              squareOn={this.state.square_id_on}\n              onMove={(key) => this.followPath(key)}\n              onClick={this.renderRestart}\n            />\n          ));\n        })}\n        <button\n          id=\"clear-maze\"\n          onClick={this.ResetMaze}\n          type=\"button\"\n          class=\"btn btn-warning\"\n        >\n          Clear Maze\n        </button>\n        <button\n          id=\"create-maze\"\n          onClick={() => this.pathMaker(0, SIZE * SIZE - 1)}\n          type=\"button\"\n          class=\"btn btn-danger\"\n        >\n          Create Maze\n        </button>\n        <button\n          id=\"show-solution\"\n          onClick={() => this.showSolution(0, SIZE * SIZE - 1)}\n          type=\"button\"\n          class=\"btn btn-success\"\n        >\n          Show Solution\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Maze;\n","import React, { Component } from 'react';\n\nconst TIME_TO_BEAT = 3;\n\nclass Timer extends Component {\n\n    startTimer = (clock) => {\n        var timer = setInterval(() => {\n            var time = this.props.time_left;\n            if (time <= 0) {\n                this.setState({time_left: TIME_TO_BEAT})\n                this.stopTimer();\n                return;\n            }\n            this.setState((state) => ({time_left: time - 1}))\n        }, 1000);\n        this.setState({timer: timer})\n    }\n\n    stopTimer = () => {\n        clearInterval(this.state.timer);\n    }\n\n    beginGame = () => {\n        if (this.props.inMotion) {\n            this.startTimer(TIME_TO_BEAT)\n        }\n    }\n\n    formatTimer = () => {\n        if (this.props.inMotion) {\n            return \"btn btn-warning btn-lg btn-block\"\n        }\n        else if (this.props.isComplete && !this.props.playerWon) {\n            return \"btn btn-danger btn-lg btn-block\"\n        }\n        else {\n            return \"btn btn-success btn-lg btn-block\"\n        }\n    }\n    \n    formatText = () => {\n        if (this.props.inMotion) {\n            return this.props.time_left;\n        }\n        else if (this.props.isComplete && this.props.playerWon) {\n            return \"You win! Click me to play again\"\n        }\n        else if (this.props.isComplete) {\n            return \"Oof. Play again?\"\n        }\n        else {\n            return \"Start Game\"\n        }\n    }\n    render() { \n        return (  \n            <div id=\"timer-parent\">\n                <button onClick={this.props.onClick} id=\"timer\" class={this.formatTimer()} >\n                {this.formatText()}\n                </button>\n            </div>\n        );\n    }\n}\n \nexport default Timer;","import React, { Component } from \"react\";\nimport Maze from \"./maze\";\nimport Timer from \"./timer\";\n\nconst TIME_TO_BEAT = 30;\nconst SIZE = 25;\nconst END = SIZE * SIZE - 1;\n\nclass Game extends Component {\n  state = {\n    inMotion: false,\n    gameComplete: false,\n    playerWon: false\n  };\n\n  sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  startMaze = () => {\n    document.getElementById(\"create-maze\").click();\n    document.getElementById(\"timer\").innerHTML = TIME_TO_BEAT;\n    var timer = setInterval(() => {\n      var time = parseInt(document.getElementById(\"timer\").innerHTML);\n      if (time <= 0) {\n        document.getElementById(\"show-solution\").click();\n        this.setState({ inMotion: false, gameComplete: true });\n        document.getElementById(\"timer\").disabled = false;\n        clearInterval(timer);\n        return;\n      }\n      else if (this.state.gameComplete) {\n        document.getElementById(\"timer\").disabled = false;\n        this.setState({ inMotion: false, playerWon: true });\n        clearInterval(timer);\n        return;\n      }\n      document.getElementById(\"timer\").innerHTML = time - 1;\n    }, 1000);\n  };\n\n  renderStart = () => {\n    this.setState({ inMotion: true, gameComplete: false, playerWon: false }, () => {\n      document.getElementById(\"timer\").disabled = true;\n      document.getElementById(\"clear-maze\").click();\n      document.getElementById(\"timer\").innerHTML = \"Get Ready\"\n      this.sleep(1000).then(this.startMaze);\n    });\n  };\n\n  renderFinish = (id_on) => {\n      if (id_on === END) {\n          this.setState({gameComplete: true})\n      }\n  }\n\n  render() {\n    return (\n      <div id=\"game\">\n        <Maze isComplete={this.renderFinish} gameComplete={this.state.gameComplete}/>\n        <Timer\n          onClick={this.renderStart}\n          inMotion={this.state.inMotion}\n          time_left={TIME_TO_BEAT}\n          isComplete={this.state.gameComplete}\n          playerWon={this.state.playerWon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from \"./components/game\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n//import Maze from \"./components/maze\"\n//import Square from './components/square';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}